name: Update Release Description with Changelog

on:
  release:
    types:
      - created

jobs:
  update_release_description:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch Last Release Tag Name
        id: get_last_release
        run: |
          # Get the owner and repository from the GitHub repository URL
          owner=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          repo=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          # Fetch the last release information using GitHub API
          last_release=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$owner/$repo/releases?per_page=1" | jq -r '.[0].tag_name')

          # Set the last release tag name as an environment variable
          echo "LAST_RELEASE_TAG=$last_release" >> $GITHUB_ENV

        # Make sure to have jq installed to parse JSON response
        # You can add it by uncommenting the following line
        # - name: Install jq
        #   run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate Changelog
        id: generate_changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install conventional-changelog-cli
          npm install -g conventional-changelog-cli

          # Generate the changelog since the penultimate release
          changelog=$(conventional-changelog -p angular -r 0...${{ env.LAST_RELEASE_TAG }})

          # Escape newlines in the changelog before setting it as an environment variable
          escaped_changelog=$(echo "$changelog" | awk '{printf "%s\\n", $0}')
          echo "CHANGELOG=$escaped_changelog" >> $GITHUB_ENV

      - name: Debug - Print Changelog
        run: |
          echo "Changelog:"
          echo "${{ env.CHANGELOG }}"

      - name: Fetch Commit Messages
        id: fetch_commits
        run: |
          # Fetch all commit messages since the penultimate release using GitHub API compare endpoint
          commit_messages=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/compare/${{ env.LAST_RELEASE_TAG }}...HEAD" | jq -r '.commits[].commit.message')

          # Set the commit messages as an environment variable
          echo "ALL_COMMIT_MESSAGES=$commit_messages" >> $GITHUB_ENV

      - name: Debug - Print Commit Messages
        run: |
          echo "Commit Messages:"
          echo "${{ env.ALL_COMMIT_MESSAGES }}"

      - name: Update Release Description
        if: ${{ env.LAST_RELEASE_TAG != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Combine commit messages and changelog into the updated description
          updated_description="${{ github.event.release.body }}"$'\n'"$CHANGELOG"$'\n'"### Commits"$'\n'"$ALL_COMMIT_MESSAGES"

          # Update the release description using gh CLI
          gh release edit "${{ github.event.release.tag_name }}" --notes="$updated_description"
